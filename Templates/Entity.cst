<%-- 
Name: Entity
Author: 茅书华
Description: 生成Entity
--%>
<%@ CodeTemplate Inherits="CodeTemplate" TargetLanguage="Text" Description="NetTiers main template."Debug="True" ResponseEncoding="UTF-8"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>

<%-- 要打印的表 --%>
<%@ Property Name="Table" Type="TableSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required"　Description="Database that the tables views, and stored procedures shouldbe based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, theEntire Database will then be generated." %>
<%-- 命名空间 --%>
<%@ Property Name="Namespace" Type="System.String" Optional="False" Default="" Category="命名空间" %>

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Tuhui.Common45.Framework;

namespace Tuhui.<%=Namespace%>.Model
{
    //<%=Table.Description %>
    [Table("<%=Table.Name%>")]
    public partial class <%=Table.Name%> : BaseEntity
    {
        <% foreach(ColumnSchema col in Table.Columns){ %>
           //<%=col.Description %>
           <%if(col.IsPrimaryKeyMember){ %>
           [Key]
           <% } %>
           public <%=DataType2CSharpType(col.DataType) %> <%=col.Name %>  { get; set; }
        <% } %>
    }
}

<script runat="template">

//将数据库类型转化为C#类型
public string DataType2CSharpType(System.Data.DbType dbType)
{
    switch (dbType)
    {
        case DbType.AnsiString:

            return "string";

        case DbType.AnsiStringFixedLength:

            return "string";

        case DbType.Binary:

            return "byte[]";

        case DbType.Boolean:

            return "bool";

        case DbType.Byte:

            return "byte";

        case DbType.Currency:

            return "decimal";

        case DbType.Date:

            return "DateTime";

        case DbType.DateTime:

            return "DateTime";

        case DbType.DateTime2:

            return "DateTime";

        case DbType.DateTimeOffset:

            return "DateTime";

        case DbType.Decimal:

            return "decimal";

        case DbType.Double:

            return "double";

        case DbType.Guid:

            return "Guid";

        case DbType.Int16:

            return "short";

        case DbType.Int32:

            return "int";

        case DbType.Int64:

            return "long";

        case DbType.Object:

            return "object";

        case DbType.SByte:

            return "sbyte";

        case DbType.Single:

            return "float";

        case DbType.String:

            return "string";

        case DbType.StringFixedLength:

            return "string";

        case DbType.Time:

            return "TimeSpan";

        case DbType.UInt16:

            return "ushort";

        case DbType.UInt32:

            return "uint";

        case DbType.UInt64:

            return "ulong";

        case DbType.VarNumeric:

            return "decimal";

        case DbType.Xml:

            return "string";
            
        default:

            return "object";
    }
}
</script>